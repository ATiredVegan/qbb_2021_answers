{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quantitative Biology and Biophysics (AS.020.674/250.644)\tSpring 2020\n",
    "## Gordus Lab \n",
    "## February 4, 2021\n",
    "\n",
    "\n",
    "## Due: Monday February 8, 2021, 11:59 PM\n",
    "\n",
    "# Problem 1a: Data distributions\n",
    "\n",
    "You are going to work with single and double ¬Gaussian data from Viets, et. al (2019). You have been provided with data in the form of an excel file.\n",
    "\n",
    "You will find many of the cells already have code I have written for you. Execute these cells. Any cells that are empty are cells where you need to add code.\n",
    "\n",
    "We want to explore these data, to do this we will first plot this data in a variety of ways using seaborn.\n",
    "\n",
    "Please follow these steps:\n",
    "\n",
    "1. Use pandas to read in data from the excel file.\n",
    "2. Use seaborn to plot the data using the following tools:\n",
    "\n",
    "    a.\tProduce a swarm plot of the data\n",
    "    \n",
    "    b.\tProduce a violin plot of the data\n",
    "    \n",
    "    c.\tProduce a box plot of the data\n",
    "    \n",
    "    d.\tProduce a bar plot of the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are the libraries you will need for this problem\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from scipy.optimize import minimize\n",
    "from scipy.stats import norm\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Student Input Cell:\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair distance</th>\n",
       "      <th>Sample</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.300000</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.447214</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.100000</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.800000</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.811077</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1795</th>\n",
       "      <td>0.806226</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1796</th>\n",
       "      <td>1.216553</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1797</th>\n",
       "      <td>1.100000</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1798</th>\n",
       "      <td>0.600000</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1799</th>\n",
       "      <td>1.523155</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1800 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      pair distance   Sample\n",
       "0          1.300000  control\n",
       "1          0.447214  control\n",
       "2          1.100000  control\n",
       "3          1.800000  control\n",
       "4          1.811077  control\n",
       "...             ...      ...\n",
       "1795       0.806226        Q\n",
       "1796       1.216553        Q\n",
       "1797       1.100000        Q\n",
       "1798       0.600000        Q\n",
       "1799       1.523155        Q\n",
       "\n",
       "[1800 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import Data, and name the dataframe data_df\n",
    "\n",
    "data_df = pd.read_excel(\"bob_pairing_data.xlsx\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Student Input Cell:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the matplotlib figure\n",
    "fig, ax = plt.subplots(figsize=(10,10))\n",
    "ax.boxplot(ax=ax,x=\"Sample\",y=\"pair distance\",data=data_df)\n",
    "ax.swarmplot(ax=ax,x=\"Tissue\",y=\"Transcript Density\",data=exc154_data,hue=\"Genotype\",order=[\"Antenna\",\"Early Pulse\"],hue_order=[\"WT\",\"Exc154 homozygous\",\"Exc154 hemizygous\"],dodge=True,palette=\"dark\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1b: Fitting distributions\n",
    "\n",
    "Some of the samples appear to produce a Gaussian distribution, while others seem to be the result of two Gaussians. Which distribution is more likely for each dataset? We need to do the following:\n",
    "\n",
    "1. Calculate the mean and standard deviation.\n",
    "2. Use these parameters to produce a Gaussian distribution with the data.\n",
    "3. Use this function to define the log-likelihood of this function.\n",
    "4. Use the maximum likeklihood function to calculate the best parameters for a double-Gaussian.\n",
    "5. Use these parameters to define the log-likelihood for each sample.\n",
    "6. Use these log-likelihoods in the Bayesian Information Criterion to decide which distribution is most likely.\n",
    "\n",
    "I normally like to work in the realm of arrays, rather than DataFrames. This is because I like to leverage the power and speed of executing linear algebra functions instead of FOR loops. These functions are pre-compiled, so they are much faster. Iteratively going through arrays or DataFrames is computationally exhaustive, and take a long time to run when using large arrays of data.\n",
    "\n",
    "So, first I make a numpy array where the rows are observations, and columns are samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert dataframe to numpy array\n",
    "data_n = data_df.to_numpy()\n",
    "data_n = pd.to_numeric(data_n[:,0])\n",
    "data_n.resize(18,100)\n",
    "data_n = np.transpose(data_n)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gaussian Distribution:\n",
    "\n",
    "Next, I can compute the mean and standard deviation for every sample with one command, by setting the axis = 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = np.nanmean(data_n, axis = 0)\n",
    "sigma = np.nanstd(data_n, axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Isn't that great? I avoided a FOR loop by using an array, and telling the function which axis to use. Both mu and sigma have 18 entries, because I calculated the mean for each column (down the rows, or axis = 0). If I had chosen axis=1, mu and sigma would be 100 elements long, because I would have calculated the mean and standard deviation of each row.\n",
    "\n",
    "Next, I create a function that creates the Gaussian distribution, and also the log-likelihood for a Gaussian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gauss_fun(x,mu,sigma):\n",
    "    # x is a matrix, mu and sigma are vectors\n",
    "    \n",
    "    amp = np.power(2*np.pi*np.power(sigma,2),0.5)\n",
    "    return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sigma, 2.))) / amp\n",
    "\n",
    "\n",
    "# Gaussian logL\n",
    "    \n",
    "def gausslogl(x, mu, sigma):\n",
    "    # x is a matrix, mu and sigma are vectors\n",
    "    \n",
    "    p = gauss_fun(x,mu,sigma)\n",
    "    return np.nansum(np.log(p), axis = 0)\n",
    "\n",
    "\n",
    "# Log-likelihood of each sample\n",
    "\n",
    "logL1 = gausslogl(data_n, mu, sigma)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since Gaussian distributions are so common in scientific work, the scipy library has a norm function that can perform all sorts of useful operations, including the above calculations. You can compare the results below and see that the code above matches what you would get from these functions. However, scipy doesn't have all the distributions possible in the world, so knowing how to code this for yourself is useful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double-Gaussian log-likelihood:\n",
    "\n",
    "The double Gaussian log-likelihood function is simply the log of the sum of two Gaussians.\n",
    "\n",
    "NOTE: I output the NEGATIVE of a log-likelihood with this function. Why I do this is explained below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Double Gaussian log likelihood function\n",
    "\n",
    "def dgausslogl(params,x):\n",
    "    \n",
    "    mu1 = params[0]\n",
    "    mu2 = params[1]\n",
    "    sigma1 = params[2]\n",
    "    sigma2 = params[3]\n",
    "    w = params[4]\n",
    "    \n",
    "    gauss1 = gauss_fun(x,mu1,sigma1)\n",
    "    gauss2 = gauss_fun(x,mu2,sigma2)\n",
    "    \n",
    "    p = w*gauss1 + (1-w)*gauss2\n",
    "    \n",
    "    return -np.nansum(np.log(p))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next up is using the log likelihood function for the double Gaussian to identify the best parameters to use for each sample. To do this, we will use a non-linear optimizer from scipy called \"minimize\". It is a recursive algorithm that takes as input a function and parameters, and changes the parameters until the function reaches a minimum. The input function we will use is the double Gaussian log-likelihood function which is simply the log of the sum of two Gaussians.\n",
    "\n",
    "A KEY point here is that we want to MAXIMIZE the likelihood function, but we are using a MINIMIZE function, so the function below returns the NEGATIVE of the log-likelihood so that the minimum of this is actually the maximum for the log likelihood function.\n",
    "\n",
    "After I use the maximize the negative of the log-likelihood function to find the best parameters of a double Gaussian for each sample, I then save the log-likelihood of the double Gaussian for each sample.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "logL2 = np.zeros(np.shape(logL1))\n",
    "\n",
    "params_double = np.zeros((5,18))\n",
    "\n",
    "for m in (range(len(mu))):\n",
    "    params0 = [mu[m] - sigma[m], mu[m] + sigma[m], sigma[m], sigma[m], 0.6]\n",
    "    result = minimize(dgausslogl, params0, args=data_n[:,m], method='Nelder-Mead')\n",
    "    params_double[:,m] = result.x\n",
    "    logL2[m] = -dgausslogl(result.x,data_n[:,m])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've calculated the log likelihood functions for both the single and double Gaussian distributions, we're ready to calculate the BIC! Remember, the model that produces the LOWEST BIC is the one that is most likely, RELATIVE to the other models it is compared to.\n",
    "\n",
    "In the cell below, use the BIC function from Lecture 1 to calculate which distribution is most likely for each sample.\n",
    "\n",
    "# Student Input Cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BIC: Best model has LOWEST BIC\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Problem 2: Solving ODE functions\n",
    "\n",
    "We’re going to analyze a simple compartment model used in epidemiology, the SIR (Susceptible, Infected, Recovered) model. It is a set of couple ordinary differential equations (ODEs) that describe the spread of an infectious disease through a population. This forms the basis for many other, more complicated models you may have seen discussed in the news. In many ways, it is very similar to the types of equations used to model chemical dynamics. For example, to create a new infected person, an infected person must come into contact with a susceptible person, therefore the kinetic term is the product of these two popualtions, just like an enzyme coming into contact with its substrate. \n",
    "\n",
    "Below is a flow diagram for disease progression:\n",
    "\n",
    " \n",
    "\n",
    "The ordinary differential equations (ODEs) are:\n",
    "\n",
    "dS/dt= -βSI\n",
    "\n",
    "dI/dt= βSI- γI\n",
    "\n",
    "dR/dt=(1-f)γI\n",
    "\n",
    "dD/dt=fγI\n",
    "\n",
    "\n",
    "Where:\n",
    "\n",
    "S = Susceptible population\n",
    "\n",
    "I = Infected population\n",
    "\n",
    "R = Recovered population\n",
    "\n",
    "β = disease transmission rate\n",
    "\n",
    "γ = recovery rate\n",
    "\n",
    "f = fraction of infected that die\n",
    "\n",
    "<div>\n",
    "<img src=\"SIR1.png\" width=\"500\"/>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ODE Solver you will need:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.integrate import solve_ivp\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The SIR function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SIR ODE, returns the following:\n",
    "#\n",
    "# dS/dt\n",
    "# dI/dt\n",
    "# dR/dt\n",
    "# dD/dt\n",
    "\n",
    "def SIR(t,y):\n",
    "    return np.array([-beta*y[0]*y[1], beta*y[0]*y[1] - gamma*y[1], (1-f)*gamma*y[1],\n",
    "             f*gamma*y[1]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this problem, we are going to model the progression of COVID in NYC, using parameters and population numbers gathered from public data during the time when the shelter in place order was put in place. For these calculations, to make things a little easier, we are normalizing all population numbers by the total population of NYC. When COVID first spread through the city, it grew with exponential growth, because:\n",
    "\n",
    "dI/dt= βSI\n",
    "\n",
    "At day t=0, there were 30 confirmed COVID cases. By day 12, there were 17,644 confirmed cases in the city. At this point, the city instituted a lockdown order, with the hopes of ebbing the spread of the disease. By day 52, the number of confirmed cases had risen to 167,000. The question here is did the lockdown order have an effect? What would the numbers had been like without any intervention?\n",
    "\n",
    "Below are the parameters for the model based on observed rates of transmission and city statistics:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set Variables\n",
    "# NOTE: Timescale is days\n",
    "\n",
    "S0 = 1 # Actual NYC population: 8*np.power(10,6)\n",
    "I0 = 30 / (8*np.power(10,6))\n",
    "\n",
    "R0 = 2.2\n",
    "gamma = 0.44\n",
    "beta = R0*gamma/S0\n",
    "\n",
    "# Current NYC Stats\n",
    "\n",
    "Conf = 167000 #52 days from t0\n",
    "Dead = 13000 #52 days from t0\n",
    "Rec = 40000 #52 days from t0\n",
    "\n",
    "# Shelter in Place occurred t = 12 days\n",
    "# Confirmed cases was ~17644 at this point\n",
    "\n",
    "f = Dead/Conf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As I mentioned in lecture, linear systems of ODEs, where you can describe the system in matrix format, have analytical solutions, so you can calculate the time dependent states as functions of time, i.e. you can calculate S(t), I(t), R(t) & D(t) based on knowing dS/dt, dI/dt, etc.\n",
    "\n",
    "The challenge is that you often want to know the time-dependent versions of states, but rates are often easier to observe. This is not only true in epidemiology, but also in chemistry and physics. It's often easier to calculate rates.\n",
    "\n",
    "Unfortunately, many (most) ODE models that describe the real world are not linear, so you have to solve them numerically. One useful tool for analyzing them is using a quiver plot, where you plot the velocities, or \"flows\" of each variable under different conditions. Here is a diagram of a flow diagram:\n",
    "\n",
    "\n",
    "<div>\n",
    "<img src=\"quiver2.png\" width=\"500\"/>\n",
    "</div>\n",
    "\n",
    "<div>\n",
    "<img src=\"quiver.png\" width=\"500\"/>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "You can plot this by first defining a span of variables you want to analyze."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PHASE PLANE\n",
    "\n",
    "Sspan = np.linspace(0,S0,10)\n",
    "Ispan = np.linspace(0,S0,10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, you make a meshgrid for these, which basically creates a matrix of coordinates that you are going to peg values to."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grid of x & y values\n",
    "S, I = np.meshgrid(Sspan, Ispan)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, for each of these coordinates, you want to calculate the rates/velocities for each variable at each point in the meshgrid.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Empty matrices to fill in with velocity data\n",
    "dS = np.zeros(np.shape(S))\n",
    "dI = np.zeros(np.shape(I))\n",
    "\n",
    "# Fill velocities into grid.\n",
    "for m in range(S.shape[0]):\n",
    "    for n in range(I.shape[0]):\n",
    "        dS[m,n] = -beta*S[m,n]*I[m,n]\n",
    "        dI[m,n] = beta*S[m,n]*I[m,n] - gamma*I[m,n]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also useful to plot the nullclines, which are paths in state space where velocities are zero. You can calculate these by setting the above ODEs to zero, and solving for the variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Null Clines\n",
    "\n",
    "Sn = gamma/beta\n",
    "In = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The beta term is a rate constant that captures the probability of an infected person infecting a susceptible person. Masks decrease this rate of transmission, i.e. they decrease beta.\n",
    "\n",
    "In the cell below, I give some example code for how to plot a flow diagram using the \"quiver\" function from matplotlib. Copy and paste the code above that creates the grid of velocities, and plot flow diagrams with beta values that are 0.5 * beta, 0.25 * beta, and 0.1 * beta. Make sure to plot the null cline as well. How does the flow change?\n",
    "\n",
    "# Student Input Cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'I')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Copy and past the velocities grid and null cline code here, and use it to write a for loop of different\n",
    "# beta values you will use to create different flows that you will plot with the quiver function.\n",
    "\n",
    "fig, ax = plt.subplots(2,2)\n",
    "q = ax[0,0].quiver(S , I , dS, dI)\n",
    "\n",
    "# Flow diagram\n",
    "ax[0,0].quiverkey(q, X=0.3, Y=1.1, U=1,label='Quiver key, length = 1/day', labelpos='E')\n",
    "\n",
    "# Null Cline\n",
    "ax[0,0].plot([Sn, Sn], [0,S0])\n",
    "ax[0,0].set_xlabel('S')\n",
    "ax[0,0].set_ylabel('I')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The flow diagrams are great because they give you a feel for how the variables will flow in time, but often you want to predict what their values will actually be over time, i.e. we want to know I(t), not dI/dt. To do this, we'll use one of scipy's (many) ODE solvers. The basis for this solver is Euler's Method discussed in class.\n",
    "\n",
    "I provide some example code below for how to use the ODE solver. The example I give is starting with the initial conditions from above on day t=0, and then predicting the progression of the disease after 52 days.\n",
    "\n",
    "What I want you to do:\n",
    "\n",
    "I want you to predict what would happen if you intervened on day t=12 with the shelter in place order. Assume this decreases the number of susceptible people (S) by 42%. How does the disease progress after this? Plot the S, I, D, & R over time for both no-intervention, and with intervention. Also plot the cumulative populations for each.\n",
    "\n",
    "# Student Input Cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Without Intervention\n",
    "sol_no_int = solve_ivp(SIR, [0,51],[S0,I0,0,0],max_step = 1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 3: PCA & tSNE\n",
    "\n",
    "For this problem, you will simply be plotting a dataset of three clusters with PCA and tSNE.\n",
    "\n",
    "Functions you will need:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from sklearn.manifold import TSNE\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-----------#\n",
    "# EMBEDDING #\n",
    "#-----------#\n",
    "\n",
    "# Raw Data\n",
    "\n",
    "data = np.loadtxt('Embed_input.txt',delimiter='\\t')\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "ax.scatter(data[:1000,0], data[:1000,1], data[:1000,2])\n",
    "ax.scatter(data[1000:2000,0], data[1000:2000,1], data[1000:2000,2])\n",
    "ax.scatter(data[2000:,0], data[2000:,1], data[2000:,2])\n",
    "plt.title('Raw Data')\n",
    "\n",
    "# PCA\n",
    "\n",
    "pca = PCA(n_components=2)\n",
    "pca.fit(data)\n",
    "pca_embedded = pca.transform(data)\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.xlabel('Component 1')\n",
    "plt.ylabel('Component 2')\n",
    "plt.title('PCA Embedding')\n",
    "\n",
    "\n",
    "sns.scatterplot(x=pca_embedded[:1000, 0], y=pca_embedded[:1000, 1])\n",
    "sns.scatterplot(x=pca_embedded[1000:2000, 0], y=pca_embedded[1000:2000, 1])\n",
    "sns.scatterplot(x=pca_embedded[2000:, 0], y=pca_embedded[2000:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see from the plots, the three clusters are distinct, but not spherical. PCA has a tough time with them. In the code below, I use tSNE with perplexity set to 30.\n",
    "\n",
    "Modify the code to show what the embedding looks like when you set the perplexity to 2, 30, 50, or 100.\n",
    "\n",
    "NOTE: The tSNE function takes some time to run. Depending on your processor speed, it might take a couple of minutes.\n",
    "\n",
    "\n",
    "# Student Input Cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TSNE\n",
    "\n",
    "f, axes = plt.subplots(2, 2)\n",
    "f.suptitle('tSNE')\n",
    "\n",
    "tsne_embedded = TSNE(n_components=2,perplexity=30).fit_transform(data)\n",
    "sns.scatterplot(x=tsne_embedded[:1000, 0], y=tsne_embedded[:1000, 1],ax = axes[0,0])\n",
    "sns.scatterplot(x=tsne_embedded[1000:2000, 0], y=tsne_embedded[1000:2000, 1],ax = axes[0,0])\n",
    "sns.scatterplot(x=tsne_embedded[2000:, 0], y=tsne_embedded[2000:, 1],ax = axes[0,0])\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
